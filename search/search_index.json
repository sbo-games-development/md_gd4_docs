{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"MD_GD4_DOCS","text":"<p>Create Markdown documentation files automatically from Godot 4 projects/docstrings.</p> <p>The full source code can be found at md_gd4_docs - GitHub.com</p> <p>The documentation is split in 2 Parts:</p> <ul> <li>User documentation: How to install and use the application.</li> <li>Project documentation: Documentation of the project and the source code.</li> </ul>"},{"location":"src/","title":"app.py","text":"<p>An application to create Markdown documentation files automatically from Godot 4 projects/docstrings.</p> <p>The full source code can be found at md_gd4_docs - GitHub.com</p>"},{"location":"src/#src.app.Main","title":"<code>Main</code>","text":"<p>Main entry point of the application</p> <p>Attributes:</p> Name Type Description <code>version</code> <code>str</code> <p>Version of the application, also shown in the help</p> <p>Returns:</p> Name Type Description <code>Application_exit_code</code> <code>int</code> <p>0 = success | 2 = argument parsing error | 5 = input/output error | and more?</p> Source code in <code>src/app.py</code> <pre><code>class Main:\n    \"\"\"\n    Main entry point of the application\n\n    Attributes:\n        version: Version of the application, also shown in the help\n\n    Returns:\n        Application_exit_code (int): 0 = success | 2 = argument parsing error | 5 = input/output error | and more?\n    \"\"\"\n    def __init__(self):\n        \"\"\"\n        Constructor of the applications Main class.\n\n        Depending on command line args, either initializes the settings or build markdown files as configured in\n        the settings file.\n        \"\"\"\n        self.version: str = \"0.1.0\"\n        args: argparse.Namespace = self.arg_parse_init()\n        settings: Settings = Settings()\n        if args.init:\n            result: bool = settings.init_settings()\n        elif args.build:\n            result: bool = settings.load_settings()\n            if result:\n                Build(settings.get_settings(), settings.doc_conf_file)\n        else:\n            print(\"Something went very wrong ...\")\n            result: bool = False\n        if result:\n            exit(0)\n        else:\n            exit(5)\n\n    def arg_parse_init(self):\n        \"\"\"\n        Parses and returns the command line arguments.\n\n        Sets init (-i/--init) or build (-b/--build) to True, shows the help (-h/--help) or the version (-v/--version).\n        If none of the former applies, an error message wil be displayed.\n        \"\"\"\n        parser = argparse.ArgumentParser(\n            prog=\"md_gd4_docs\",\n            description=\"Create Markdown documentation files automatically from Godot 4 projects/docstrings\",\n            epilog=\"For a full user documentation, visit https://sbo-games-development.github.io/md_gd4_docs/userdoc/\"\n        )\n        group = parser.add_mutually_exclusive_group(required=True)\n        group.add_argument(\n            \"-i\", \"--init\", action=\"store_true\",\n            help=\"Creates a settings template (./md_gd4_docs.yml)\"\n        )\n        group.add_argument(\n            \"-b\", \"--build\", action=\"store_true\",\n            help=\"Creates the documentation files following the settings file ./md_gd4_docs.yml\"\n        )\n        group.add_argument(\n            \"-v\", \"--version\", action=\"version\", version=f\"%(prog)s {self.version}\",\n            help=\"Shows the version of the application\"\n        )\n        return parser.parse_args()\n</code></pre>"},{"location":"src/#src.app.Main.__init__","title":"<code>__init__()</code>","text":"<p>Constructor of the applications Main class.</p> <p>Depending on command line args, either initializes the settings or build markdown files as configured in the settings file.</p> Source code in <code>src/app.py</code> <pre><code>def __init__(self):\n    \"\"\"\n    Constructor of the applications Main class.\n\n    Depending on command line args, either initializes the settings or build markdown files as configured in\n    the settings file.\n    \"\"\"\n    self.version: str = \"0.1.0\"\n    args: argparse.Namespace = self.arg_parse_init()\n    settings: Settings = Settings()\n    if args.init:\n        result: bool = settings.init_settings()\n    elif args.build:\n        result: bool = settings.load_settings()\n        if result:\n            Build(settings.get_settings(), settings.doc_conf_file)\n    else:\n        print(\"Something went very wrong ...\")\n        result: bool = False\n    if result:\n        exit(0)\n    else:\n        exit(5)\n</code></pre>"},{"location":"src/#src.app.Main.arg_parse_init","title":"<code>arg_parse_init()</code>","text":"<p>Parses and returns the command line arguments.</p> <p>Sets init (-i/--init) or build (-b/--build) to True, shows the help (-h/--help) or the version (-v/--version). If none of the former applies, an error message wil be displayed.</p> Source code in <code>src/app.py</code> <pre><code>def arg_parse_init(self):\n    \"\"\"\n    Parses and returns the command line arguments.\n\n    Sets init (-i/--init) or build (-b/--build) to True, shows the help (-h/--help) or the version (-v/--version).\n    If none of the former applies, an error message wil be displayed.\n    \"\"\"\n    parser = argparse.ArgumentParser(\n        prog=\"md_gd4_docs\",\n        description=\"Create Markdown documentation files automatically from Godot 4 projects/docstrings\",\n        epilog=\"For a full user documentation, visit https://sbo-games-development.github.io/md_gd4_docs/userdoc/\"\n    )\n    group = parser.add_mutually_exclusive_group(required=True)\n    group.add_argument(\n        \"-i\", \"--init\", action=\"store_true\",\n        help=\"Creates a settings template (./md_gd4_docs.yml)\"\n    )\n    group.add_argument(\n        \"-b\", \"--build\", action=\"store_true\",\n        help=\"Creates the documentation files following the settings file ./md_gd4_docs.yml\"\n    )\n    group.add_argument(\n        \"-v\", \"--version\", action=\"version\", version=f\"%(prog)s {self.version}\",\n        help=\"Shows the version of the application\"\n    )\n    return parser.parse_args()\n</code></pre>"},{"location":"src/control/build/","title":"build.py","text":""},{"location":"src/control/build/#src.control.build.Build","title":"<code>Build</code>","text":"<p>Reads the necessary data from the project and source files and generates the markdown documentation file(s) from it.</p> <p>Attributes:</p> Name Type Description <code>doc_conf_data</code> <code>CommentedMap</code> <p>The deserialized settings for reading the sourcecode</p> <code>doc_conf_file</code> <code>str</code> <p>Path to the documentation config file</p> <code>gd_project</code> <code>dict</code> <p>For information extracted from project.godot file</p> <code>script_files</code> <code>list</code> <p>A list with information for all script files in the project and/or in the filelist_scan scan_list</p> <code>scene_files</code> <code>list</code> <p>A list for all scene files of the project</p> <p>doc_conf_data attributes:</p> Name Type Description <code>doc_destination</code> <code>str</code> <p>Destination directory for the resulting documentation. Create if not exists</p> <code>rebuild_src_path</code> <code>bool</code> <p>Reproduces directories from src_path for doc_destination if True</p> <code>project_scan</code> <code>bool</code> <p>Scanning all files of a project if True</p> <code>project_scan_options</code> <code>list[dict]</code> <p>Mandatory if project_scan is True</p> <code>filelist_scan</code> <code>bool</code> <p>Scanning a manually created list if True, can be combined with project_scan to add more files to scan</p> <code>scan_list</code> <code>list</code> <p>List to be scanned if filelist_scan is True</p> <p>doc_conf_data.project_scan_options attributes</p> Name Type Description <code>src_path</code> <code>str</code> <p>The base directory of the project to scan</p> <code>read_gd_project(bool)</code> <code>str</code> <p>Creates a project documentation index if True</p> <code>scene2src_links</code> <code>bool</code> <p>Scans and documents if a script is linked to a scene</p> <p>gd_project attributes:</p> Name Type Description <code>project_name</code> <code>str</code> <p>For the name of the godot project, as read from the project.godot file</p> <code>godot_version</code> <code>str</code> <p>For the godot version of the godot source code, as read from the project.godot file</p> <code>main_scene</code> <code>str</code> <p>For the data of the main (aka starting) scene, as read from the project.godot file</p> <code>autoload</code> <code>list[dict]</code> <p>Scenes that load at application start, if enabled</p> <p>gd_project.main_scene attributes:</p> Name Type Description <code>scene_path</code> <code>str</code> <p>For the path to the main (aka starting) scene, as read from the project.godot file</p> <code>added_script</code> <code>str</code> <p>The script linked to the main scene, if any</p> <p>gd_project.autoload list[dict] attributes:</p> Name Type Description <code>scene_path</code> <code>str</code> <p>For the path to the scene, as read from the project.godot file</p> <code>added_script</code> <code>str</code> <p>The script linked to the scene, if any</p> <code>enabled</code> <code>bool</code> <p>Is the autoload scene enabled?</p> <p>Returns:</p> Name Type Description <code>Application_exit_code</code> <code>int</code> <p>Applications exits directly from this class on error. if anything is successful, returns None to the calling Main class. This gives the possibility for working with addons there after the creation of the documentation files (for example creating a full site including menus with mkdocs)</p> Source code in <code>src/control/build.py</code> <pre><code>class Build:\n    \"\"\"\n    Reads the necessary data from the project and source files and generates the markdown documentation file(s) from it.\n\n    Attributes:\n        doc_conf_data: The deserialized settings for reading the sourcecode\n        doc_conf_file: Path to the documentation config file\n        gd_project: For information extracted from project.godot file\n        script_files: A list with information for all script files in the project and/or in the filelist_scan scan_list\n        scene_files: A list for all scene files of the project\n\n    Attributes: doc_conf_data attributes:\n        doc_destination (str): Destination directory for the resulting documentation. Create if not exists\n        rebuild_src_path (bool): Reproduces directories from src_path for doc_destination if True\n        project_scan (bool): Scanning all files of a project if True\n        project_scan_options (list[dict]): Mandatory if project_scan is True\n        filelist_scan (bool): Scanning a manually created list if True, can be combined with project_scan to add more\n            files to scan\n        scan_list (list): List to be scanned if filelist_scan is True\n\n    Attributes: doc_conf_data.project_scan_options attributes\n        src_path (str): The base directory of the project to scan\n        read_gd_project(bool): Creates a project documentation index if True\n        scene2src_links (bool): Scans and documents if a script is linked to a scene\n\n    Attributes: gd_project attributes:\n        project_name (str): For the name of the godot project, as read from the project.godot file\n        godot_version (str): For the godot version of the godot source code, as read from the project.godot file\n        main_scene (str): For the data of the main (aka starting) scene, as read from the project.godot file\n        autoload (list[dict]): Scenes that load at application start, if enabled\n\n    Attributes: gd_project.main_scene attributes:\n        scene_path (str): For the path to the main (aka starting) scene, as read from the project.godot file\n        added_script (str): The script linked to the main scene, if any\n\n    Attributes: gd_project.autoload list[dict] attributes:\n        scene_path (str): For the path to the scene, as read from the project.godot file\n        added_script (str): The script linked to the scene, if any\n        enabled (bool): Is the autoload scene enabled?\n\n    Returns:\n        Application_exit_code (int): Applications exits directly from this class on error. if anything is successful,\n            returns None to the calling Main class. This gives the possibility for working with addons there after the\n            creation of the documentation files (for example creating a full site including menus with mkdocs)\n    \"\"\"\n    def __init__(self, doc_conf_data: CommentedMap, doc_conf_file: str):\n        \"\"\"\n        Constructor of the class. Anything from reading project to building documentation sites is directly done here.\n\n        Args:\n            doc_conf_data: The deserialized settings for reading the sourcecode\n            doc_conf_file: Path to the documentation config file\n        \"\"\"\n        self.doc_conf_data: CommentedMap = doc_conf_data\n        self.doc_conf_file: str = doc_conf_file\n        self.gd_project: dict = {\n            \"project_name\": \"\",\n            \"godot_version\": \"\",\n            \"main_scene\": {\n                \"scene_path\": \"\",\n                \"added_script\": \"\"\n            },\n            \"autoload\": []\n        }\n        self.script_files: list = []\n        self.scene_files: list = []\n        self.check_doc_conf_data()\n        print(f\"Check of {self.doc_conf_file} configuration file finished, everything seems ok\")\n        if self.doc_conf_data[\"project_scan\"]:\n            self.collect_proj_files_info()\n        #\n\n    def check_doc_conf_data(self):\n        \"\"\"\n        Checks if the configuration data are correct. Exits directly after printing error message if not.\n        \"\"\"\n        # todo: point to according chapter/subsite in error msgs urls?\n        print(\"Checking settings correctness before reading &amp; building ...\")\n        # print(self.doc_conf_data)\n        if \"doc_destination\" not in self.doc_conf_data or self.doc_conf_data[\"doc_destination\"] == \"\" \\\n                or not isinstance(self.doc_conf_data[\"doc_destination\"], str):\n            print(f\"doc_destination not set in {self.doc_conf_file}, empty or wrong type\")\n            print()\n            print(\"For a full user documentation, visit https://sbo-games-development.github.io/md_gd4_docs/userdoc/\")\n            exit(5)\n        if \"rebuild_src_path\" not in self.doc_conf_data or not isinstance(self.doc_conf_data[\"rebuild_src_path\"], bool):\n            print(f\"rebuild_src_path not set in {self.doc_conf_file} or wrong type\")\n            exit(5)\n        if \"project_scan\" not in self.doc_conf_data or not isinstance(self.doc_conf_data[\"rebuild_src_path\"], bool):\n            print(f\"project_scan not set in {self.doc_conf_file} or wrong type\")\n            print()\n            print(\"For a full user documentation, visit https://sbo-games-development.github.io/md_gd4_docs/userdoc/\")\n            exit(5)\n        if self.doc_conf_data[\"project_scan\"]:\n            if \"project_scan_options\" not in self.doc_conf_data \\\n                    or not isinstance(self.doc_conf_data[\"project_scan_options\"], CommentedMap):\n                print(f\"project_scan_options not set in {self.doc_conf_file}, wrong type or empty\")\n                print(\"project_scan_options are needed if project_scan is true\")\n                print()\n                print(\n                    \"For a full user documentation, visit https://sbo-games-development.github.io/md_gd4_docs/userdoc/\"\n                )\n                exit(5)\n            if \"src_path\" not in self.doc_conf_data[\"project_scan_options\"] \\\n                    or self.doc_conf_data[\"project_scan_options\"][\"src_path\"] == \"\"\\\n                    or not isinstance(self.doc_conf_data[\"project_scan_options\"][\"src_path\"], str):\n                print(f\"src_path wrong type or not set in project_scan_option in {self.doc_conf_file}\")\n                print()\n                print(\n                    \"For a full user documentation, visit https://sbo-games-development.github.io/md_gd4_docs/userdoc/\")\n                exit(5)\n            if self.doc_conf_data[\"project_scan_options\"][\"src_path\"] == self.doc_conf_data[\"doc_destination\"]:\n                print(f\"Conflicting options: src_path in project_scan_options can't be the same as doc_destination in \"\n                      f\"{self.doc_conf_file} settings file\")\n                print()\n                print(\n                    \"For a full user documentation, visit https://sbo-games-development.github.io/md_gd4_docs/userdoc/\"\n                )\n                exit(5)\n            if \"read_gd_project\" not in self.doc_conf_data[\"project_scan_options\"] \\\n                    or not isinstance(self.doc_conf_data[\"project_scan_options\"][\"read_gd_project\"], bool):\n                print(f\"read_gd_project wrong type or not set in project_scan_option in {self.doc_conf_file}\")\n                print()\n                print(\n                    \"For a full user documentation, visit https://sbo-games-development.github.io/md_gd4_docs/userdoc/\"\n                )\n                exit(5)\n            if \"scene2src_links\" not in self.doc_conf_data[\"project_scan_options\"] \\\n                    or not isinstance(self.doc_conf_data[\"project_scan_options\"][\"scene2src_links\"], bool):\n                print(f\"scene2src_links wrong type or not set in project_scan_option in {self.doc_conf_file}\")\n                print()\n                print(\n                    \"For a full user documentation, visit https://sbo-games-development.github.io/md_gd4_docs/userdoc/\"\n                )\n                exit(5)\n            if not isdir(self.doc_conf_data[\"project_scan_options\"][\"src_path\"]):\n                print(f\"src_path in project_scan_options in {self.doc_conf_file} doesn't exist\")\n                print()\n                print(\n                    \"For a full user documentation, visit https://sbo-games-development.github.io/md_gd4_docs/userdoc/\"\n                )\n                exit(2)\n        if \"filelist_scan\" not in self.doc_conf_data or not isinstance(self.doc_conf_data[\"filelist_scan\"], bool):\n            print(f\"filelist_scan not set in {self.doc_conf_file} or wrong type\")\n            print()\n            print(\"For a full user documentation, visit https://sbo-games-development.github.io/md_gd4_docs/userdoc/\")\n            exit(5)\n        if not self.doc_conf_data[\"project_scan\"] and not self.doc_conf_data[\"filelist_scan\"]:\n            print(f\"At least one of the options project_scan or filelist_scan needs to be set true, otherwise theres \"\n                  f\"nothing to scan\")\n            print()\n            print(\"For a full user documentation, visit https://sbo-games-development.github.io/md_gd4_docs/userdoc/\")\n            exit(5)\n        if self.doc_conf_data[\"filelist_scan\"]:\n            if \"scan_list\" not in self.doc_conf_data \\\n                    or not isinstance(self.doc_conf_data[\"scan_list\"], CommentedSeq):\n                print(f\"scan_list not set in {self.doc_conf_file}, wrong type or empty\")\n                print(\"scan_list is needed if filelist_scan is true\")\n                print()\n                print(\n                    \"For a full user documentation, visit https://sbo-games-development.github.io/md_gd4_docs/userdoc/\"\n                )\n                exit(5)\n            if len(self.doc_conf_data[\"scan_list\"]) &lt; 1:\n                print(f\"scan_list in {self.doc_conf_file} needs at least 1 file to scan, if file_list_scan is true\")\n                print()\n                print(\n                    \"For a full user documentation, visit https://sbo-games-development.github.io/md_gd4_docs/userdoc/\"\n                )\n                exit(5)\n            for element in self.doc_conf_data[\"scan_list\"]:\n                if not isinstance(element, str) or not element.endswith(\".gd\"):\n                    print(f\"Element {str(element)} in scan_list in {self.doc_conf_file} can't be scanned, only .gd \"\n                          f\"files are allowed\")\n                    print()\n                    print(\n                        \"For a full user documentation, visit \"\n                        \"https://sbo-games-development.github.io/md_gd4_docs/userdoc/\"\n                    )\n                    exit(5)\n                if not isfile(element):\n                    print(f\"Element {str(element)} in scan_list in {self.doc_conf_file} can't be scanned, file \"\n                          f\"doesn't exist\")\n                    print()\n                    print(\n                        \"For a full user documentation, visit \"\n                        \"https://sbo-games-development.github.io/md_gd4_docs/userdoc/\"\n                    )\n                    exit(2)\n\n    def collect_proj_files_info(self):\n        \"\"\"\n        Recursively gathering *.gd files from the project.\n\n        Additionally, reads project.godot file if read_gd_project is true, and gathers *.scene files recursively if\n        scene2src_links is true, to link them to the correspondant .gd script source files\n        \"\"\"\n        print(\"Scanning godot project ...\")\n        if self.doc_conf_data[\"project_scan_options\"][\"read_gd_project\"]:\n            gd_proj_file = self.doc_conf_data[\"project_scan_options\"][\"src_path\"] + \"/project.godot\"\n            if not isfile(gd_proj_file):\n                print(\n                    f\"Warning: File '{gd_proj_file}' not found, skipping project index\"\n                )\n            else:\n                try:\n                    with open(gd_proj_file, \"r\") as file:\n                        section = \"\"\n                        for line in file:\n                            line = line.strip()\n                            if line.startswith(\";\"):\n                                continue\n                            if line.startswith(\"[\") and line.endswith(\"]\"):\n                                section = line.strip(\"[\").strip(\"]\")\n                            if \"config/name=\" in line:\n                                project_name = line.replace(\"config/name=\", \"\").strip('\"')\n                                self.gd_project[\"project_name\"] = project_name\n                                continue\n                            if \"run/main_scene=\" in line:\n                                main_scene = line.replace(\"run/main_scene=\", \"\").strip('\"')\n                                main_scene = main_scene.replace(\"res://\", \"\")\n                                self.gd_project[\"main_scene\"][\"scene_path\"] = main_scene\n                                continue\n                            if \"config/features=PackedStringArray\" in line:\n                                godot_version = line.replace(\n                                    \"config/features=PackedStringArray\", \"\"\n                                ).strip(\"(\").strip(\")\")\n                                godot_version = godot_version.replace('\"', \"\")\n                                self.gd_project[\"godot_version\"] = godot_version\n                                continue\n                            if section == \"autoload\":\n                                if \"=\" in line:\n                                    line = line.split(\"=\", 1)\n                                    scene_name = line[0]\n                                    scene_path = line[1]\n                                    scene_path = scene_path.replace(\"res://\", \"\").strip('\"')\n                                    scene_autoload_enabled = True if scene_path.startswith(\"*\") else False\n                                    scene_path = scene_path.strip(\"*\")\n                                    self.gd_project[\"autoload\"].append({\n                                        \"scene_path\": scene_path,\n                                        \"scene_name\": scene_name,\n                                        \"enabled\": scene_autoload_enabled\n                                    })\n                except Exception as e:\n                    print(f\"Skipping project index, reading {gd_proj_file} failed with Exception:\")\n                    print(e)\n                    self.gd_project: dict = {\n                        \"project_name\": \"\",\n                        \"godot_version\": \"\",\n                        \"main_scene\": \"\"\n                    }\n                else:\n                    print(self.gd_project)\n        # find all *.gd script files in the project\n        self.script_files = self.rec_find_files_with_ext(\n            \"gd\",\n            self.doc_conf_data[\"project_scan_options\"][\"src_path\"]\n        )\n        self.script_files = [\n            element.replace(self.doc_conf_data[\"project_scan_options\"][\"src_path\"], \"\")\n            for element in self.script_files\n        ]\n        # find all *.scene script files in the project, if scene2src_links true\n        self.scene_files = self.rec_find_files_with_ext(\n            \"tscn\",\n            self.doc_conf_data[\"project_scan_options\"][\"src_path\"]\n        )\n        self.scene_files = [\n            element.replace(self.doc_conf_data[\"project_scan_options\"][\"src_path\"], \"\")\n            for element in self.scene_files\n        ]\n\n    @staticmethod\n    def rec_find_files_with_ext(file_extension: str, search_directory: str) -&gt; list:\n        \"\"\"\n        Gathers a list of files with the given extension in the given directory\n\n        Args:\n            file_extension: The extension of the files to search for. Example: gd (and NOT *.gd)\n            search_directory: The directory from which to scan for the files recursively\n\n        Returns:\n            List with the full path of the files found with the given extension, relative to the working directory\n        \"\"\"\n        file_list: list = []\n        for root, dir_names, filenames in walk(search_directory):\n            for filename in filter(filenames, f\"*.{file_extension}\"):\n                file_list.append(join(root, filename))\n        return file_list\n</code></pre>"},{"location":"src/control/build/#src.control.build.Build.__init__","title":"<code>__init__(doc_conf_data, doc_conf_file)</code>","text":"<p>Constructor of the class. Anything from reading project to building documentation sites is directly done here.</p> <p>Parameters:</p> Name Type Description Default <code>doc_conf_data</code> <code>CommentedMap</code> <p>The deserialized settings for reading the sourcecode</p> required <code>doc_conf_file</code> <code>str</code> <p>Path to the documentation config file</p> required Source code in <code>src/control/build.py</code> <pre><code>def __init__(self, doc_conf_data: CommentedMap, doc_conf_file: str):\n    \"\"\"\n    Constructor of the class. Anything from reading project to building documentation sites is directly done here.\n\n    Args:\n        doc_conf_data: The deserialized settings for reading the sourcecode\n        doc_conf_file: Path to the documentation config file\n    \"\"\"\n    self.doc_conf_data: CommentedMap = doc_conf_data\n    self.doc_conf_file: str = doc_conf_file\n    self.gd_project: dict = {\n        \"project_name\": \"\",\n        \"godot_version\": \"\",\n        \"main_scene\": {\n            \"scene_path\": \"\",\n            \"added_script\": \"\"\n        },\n        \"autoload\": []\n    }\n    self.script_files: list = []\n    self.scene_files: list = []\n    self.check_doc_conf_data()\n    print(f\"Check of {self.doc_conf_file} configuration file finished, everything seems ok\")\n    if self.doc_conf_data[\"project_scan\"]:\n        self.collect_proj_files_info()\n</code></pre>"},{"location":"src/control/build/#src.control.build.Build.check_doc_conf_data","title":"<code>check_doc_conf_data()</code>","text":"<p>Checks if the configuration data are correct. Exits directly after printing error message if not.</p> Source code in <code>src/control/build.py</code> <pre><code>def check_doc_conf_data(self):\n    \"\"\"\n    Checks if the configuration data are correct. Exits directly after printing error message if not.\n    \"\"\"\n    # todo: point to according chapter/subsite in error msgs urls?\n    print(\"Checking settings correctness before reading &amp; building ...\")\n    # print(self.doc_conf_data)\n    if \"doc_destination\" not in self.doc_conf_data or self.doc_conf_data[\"doc_destination\"] == \"\" \\\n            or not isinstance(self.doc_conf_data[\"doc_destination\"], str):\n        print(f\"doc_destination not set in {self.doc_conf_file}, empty or wrong type\")\n        print()\n        print(\"For a full user documentation, visit https://sbo-games-development.github.io/md_gd4_docs/userdoc/\")\n        exit(5)\n    if \"rebuild_src_path\" not in self.doc_conf_data or not isinstance(self.doc_conf_data[\"rebuild_src_path\"], bool):\n        print(f\"rebuild_src_path not set in {self.doc_conf_file} or wrong type\")\n        exit(5)\n    if \"project_scan\" not in self.doc_conf_data or not isinstance(self.doc_conf_data[\"rebuild_src_path\"], bool):\n        print(f\"project_scan not set in {self.doc_conf_file} or wrong type\")\n        print()\n        print(\"For a full user documentation, visit https://sbo-games-development.github.io/md_gd4_docs/userdoc/\")\n        exit(5)\n    if self.doc_conf_data[\"project_scan\"]:\n        if \"project_scan_options\" not in self.doc_conf_data \\\n                or not isinstance(self.doc_conf_data[\"project_scan_options\"], CommentedMap):\n            print(f\"project_scan_options not set in {self.doc_conf_file}, wrong type or empty\")\n            print(\"project_scan_options are needed if project_scan is true\")\n            print()\n            print(\n                \"For a full user documentation, visit https://sbo-games-development.github.io/md_gd4_docs/userdoc/\"\n            )\n            exit(5)\n        if \"src_path\" not in self.doc_conf_data[\"project_scan_options\"] \\\n                or self.doc_conf_data[\"project_scan_options\"][\"src_path\"] == \"\"\\\n                or not isinstance(self.doc_conf_data[\"project_scan_options\"][\"src_path\"], str):\n            print(f\"src_path wrong type or not set in project_scan_option in {self.doc_conf_file}\")\n            print()\n            print(\n                \"For a full user documentation, visit https://sbo-games-development.github.io/md_gd4_docs/userdoc/\")\n            exit(5)\n        if self.doc_conf_data[\"project_scan_options\"][\"src_path\"] == self.doc_conf_data[\"doc_destination\"]:\n            print(f\"Conflicting options: src_path in project_scan_options can't be the same as doc_destination in \"\n                  f\"{self.doc_conf_file} settings file\")\n            print()\n            print(\n                \"For a full user documentation, visit https://sbo-games-development.github.io/md_gd4_docs/userdoc/\"\n            )\n            exit(5)\n        if \"read_gd_project\" not in self.doc_conf_data[\"project_scan_options\"] \\\n                or not isinstance(self.doc_conf_data[\"project_scan_options\"][\"read_gd_project\"], bool):\n            print(f\"read_gd_project wrong type or not set in project_scan_option in {self.doc_conf_file}\")\n            print()\n            print(\n                \"For a full user documentation, visit https://sbo-games-development.github.io/md_gd4_docs/userdoc/\"\n            )\n            exit(5)\n        if \"scene2src_links\" not in self.doc_conf_data[\"project_scan_options\"] \\\n                or not isinstance(self.doc_conf_data[\"project_scan_options\"][\"scene2src_links\"], bool):\n            print(f\"scene2src_links wrong type or not set in project_scan_option in {self.doc_conf_file}\")\n            print()\n            print(\n                \"For a full user documentation, visit https://sbo-games-development.github.io/md_gd4_docs/userdoc/\"\n            )\n            exit(5)\n        if not isdir(self.doc_conf_data[\"project_scan_options\"][\"src_path\"]):\n            print(f\"src_path in project_scan_options in {self.doc_conf_file} doesn't exist\")\n            print()\n            print(\n                \"For a full user documentation, visit https://sbo-games-development.github.io/md_gd4_docs/userdoc/\"\n            )\n            exit(2)\n    if \"filelist_scan\" not in self.doc_conf_data or not isinstance(self.doc_conf_data[\"filelist_scan\"], bool):\n        print(f\"filelist_scan not set in {self.doc_conf_file} or wrong type\")\n        print()\n        print(\"For a full user documentation, visit https://sbo-games-development.github.io/md_gd4_docs/userdoc/\")\n        exit(5)\n    if not self.doc_conf_data[\"project_scan\"] and not self.doc_conf_data[\"filelist_scan\"]:\n        print(f\"At least one of the options project_scan or filelist_scan needs to be set true, otherwise theres \"\n              f\"nothing to scan\")\n        print()\n        print(\"For a full user documentation, visit https://sbo-games-development.github.io/md_gd4_docs/userdoc/\")\n        exit(5)\n    if self.doc_conf_data[\"filelist_scan\"]:\n        if \"scan_list\" not in self.doc_conf_data \\\n                or not isinstance(self.doc_conf_data[\"scan_list\"], CommentedSeq):\n            print(f\"scan_list not set in {self.doc_conf_file}, wrong type or empty\")\n            print(\"scan_list is needed if filelist_scan is true\")\n            print()\n            print(\n                \"For a full user documentation, visit https://sbo-games-development.github.io/md_gd4_docs/userdoc/\"\n            )\n            exit(5)\n        if len(self.doc_conf_data[\"scan_list\"]) &lt; 1:\n            print(f\"scan_list in {self.doc_conf_file} needs at least 1 file to scan, if file_list_scan is true\")\n            print()\n            print(\n                \"For a full user documentation, visit https://sbo-games-development.github.io/md_gd4_docs/userdoc/\"\n            )\n            exit(5)\n        for element in self.doc_conf_data[\"scan_list\"]:\n            if not isinstance(element, str) or not element.endswith(\".gd\"):\n                print(f\"Element {str(element)} in scan_list in {self.doc_conf_file} can't be scanned, only .gd \"\n                      f\"files are allowed\")\n                print()\n                print(\n                    \"For a full user documentation, visit \"\n                    \"https://sbo-games-development.github.io/md_gd4_docs/userdoc/\"\n                )\n                exit(5)\n            if not isfile(element):\n                print(f\"Element {str(element)} in scan_list in {self.doc_conf_file} can't be scanned, file \"\n                      f\"doesn't exist\")\n                print()\n                print(\n                    \"For a full user documentation, visit \"\n                    \"https://sbo-games-development.github.io/md_gd4_docs/userdoc/\"\n                )\n                exit(2)\n</code></pre>"},{"location":"src/control/build/#src.control.build.Build.collect_proj_files_info","title":"<code>collect_proj_files_info()</code>","text":"<p>Recursively gathering *.gd files from the project.</p> <p>Additionally, reads project.godot file if read_gd_project is true, and gathers *.scene files recursively if scene2src_links is true, to link them to the correspondant .gd script source files</p> Source code in <code>src/control/build.py</code> <pre><code>def collect_proj_files_info(self):\n    \"\"\"\n    Recursively gathering *.gd files from the project.\n\n    Additionally, reads project.godot file if read_gd_project is true, and gathers *.scene files recursively if\n    scene2src_links is true, to link them to the correspondant .gd script source files\n    \"\"\"\n    print(\"Scanning godot project ...\")\n    if self.doc_conf_data[\"project_scan_options\"][\"read_gd_project\"]:\n        gd_proj_file = self.doc_conf_data[\"project_scan_options\"][\"src_path\"] + \"/project.godot\"\n        if not isfile(gd_proj_file):\n            print(\n                f\"Warning: File '{gd_proj_file}' not found, skipping project index\"\n            )\n        else:\n            try:\n                with open(gd_proj_file, \"r\") as file:\n                    section = \"\"\n                    for line in file:\n                        line = line.strip()\n                        if line.startswith(\";\"):\n                            continue\n                        if line.startswith(\"[\") and line.endswith(\"]\"):\n                            section = line.strip(\"[\").strip(\"]\")\n                        if \"config/name=\" in line:\n                            project_name = line.replace(\"config/name=\", \"\").strip('\"')\n                            self.gd_project[\"project_name\"] = project_name\n                            continue\n                        if \"run/main_scene=\" in line:\n                            main_scene = line.replace(\"run/main_scene=\", \"\").strip('\"')\n                            main_scene = main_scene.replace(\"res://\", \"\")\n                            self.gd_project[\"main_scene\"][\"scene_path\"] = main_scene\n                            continue\n                        if \"config/features=PackedStringArray\" in line:\n                            godot_version = line.replace(\n                                \"config/features=PackedStringArray\", \"\"\n                            ).strip(\"(\").strip(\")\")\n                            godot_version = godot_version.replace('\"', \"\")\n                            self.gd_project[\"godot_version\"] = godot_version\n                            continue\n                        if section == \"autoload\":\n                            if \"=\" in line:\n                                line = line.split(\"=\", 1)\n                                scene_name = line[0]\n                                scene_path = line[1]\n                                scene_path = scene_path.replace(\"res://\", \"\").strip('\"')\n                                scene_autoload_enabled = True if scene_path.startswith(\"*\") else False\n                                scene_path = scene_path.strip(\"*\")\n                                self.gd_project[\"autoload\"].append({\n                                    \"scene_path\": scene_path,\n                                    \"scene_name\": scene_name,\n                                    \"enabled\": scene_autoload_enabled\n                                })\n            except Exception as e:\n                print(f\"Skipping project index, reading {gd_proj_file} failed with Exception:\")\n                print(e)\n                self.gd_project: dict = {\n                    \"project_name\": \"\",\n                    \"godot_version\": \"\",\n                    \"main_scene\": \"\"\n                }\n            else:\n                print(self.gd_project)\n    # find all *.gd script files in the project\n    self.script_files = self.rec_find_files_with_ext(\n        \"gd\",\n        self.doc_conf_data[\"project_scan_options\"][\"src_path\"]\n    )\n    self.script_files = [\n        element.replace(self.doc_conf_data[\"project_scan_options\"][\"src_path\"], \"\")\n        for element in self.script_files\n    ]\n    # find all *.scene script files in the project, if scene2src_links true\n    self.scene_files = self.rec_find_files_with_ext(\n        \"tscn\",\n        self.doc_conf_data[\"project_scan_options\"][\"src_path\"]\n    )\n    self.scene_files = [\n        element.replace(self.doc_conf_data[\"project_scan_options\"][\"src_path\"], \"\")\n        for element in self.scene_files\n    ]\n</code></pre>"},{"location":"src/control/build/#src.control.build.Build.rec_find_files_with_ext","title":"<code>rec_find_files_with_ext(file_extension, search_directory)</code>  <code>staticmethod</code>","text":"<p>Gathers a list of files with the given extension in the given directory</p> <p>Parameters:</p> Name Type Description Default <code>file_extension</code> <code>str</code> <p>The extension of the files to search for. Example: gd (and NOT *.gd)</p> required <code>search_directory</code> <code>str</code> <p>The directory from which to scan for the files recursively</p> required <p>Returns:</p> Type Description <code>list</code> <p>List with the full path of the files found with the given extension, relative to the working directory</p> Source code in <code>src/control/build.py</code> <pre><code>@staticmethod\ndef rec_find_files_with_ext(file_extension: str, search_directory: str) -&gt; list:\n    \"\"\"\n    Gathers a list of files with the given extension in the given directory\n\n    Args:\n        file_extension: The extension of the files to search for. Example: gd (and NOT *.gd)\n        search_directory: The directory from which to scan for the files recursively\n\n    Returns:\n        List with the full path of the files found with the given extension, relative to the working directory\n    \"\"\"\n    file_list: list = []\n    for root, dir_names, filenames in walk(search_directory):\n        for filename in filter(filenames, f\"*.{file_extension}\"):\n            file_list.append(join(root, filename))\n    return file_list\n</code></pre>"},{"location":"src/control/settings/","title":"settings.py","text":""},{"location":"src/control/settings/#src.control.settings.Settings","title":"<code>Settings</code>","text":"<p>Class to handle the settings for reading the source.</p> <p>Attributes:</p> Name Type Description <code>doc_conf_file</code> <code>str</code> <p>The settings for reading the source are stored in this yaml file</p> <code>doc_conf_data</code> <code>[dict | CommentedMap]</code> <p>The deserialized settings for reading the sourcecode, also used as template at --init</p> <code>yaml</code> <code>YAML</code> <p>Object for loading and serializing yaml</p> Source code in <code>src/control/settings.py</code> <pre><code>class Settings:\n    \"\"\"\n    Class to handle the settings for reading the source.\n\n    Attributes:\n        doc_conf_file: The settings for reading the source are stored in this yaml file\n        doc_conf_data: The deserialized settings for reading the sourcecode, also used as template at --init\n        yaml: Object for loading and serializing yaml\n    \"\"\"\n    def __init__(self):\n        \"\"\"\n        Constructor of the class, defining class attributes.\n        \"\"\"\n        self.doc_conf_file: str = \"./md_gd4_docs.yml\"\n        self.doc_conf_data: [dict | CommentedMap] = {\n            \"doc_destination\": \"\",\n            \"rebuild_src_path\": True,\n            \"project_scan\": True,\n            \"project_scan_options\": {\n                \"src_path\": \"\",\n                \"read_gd_project\": True,\n                \"scene2src_links\": True\n            },\n            \"filelist_scan\": False,\n            \"scan_list\": [\n                \"./file1.gd\",\n                \"./file2.gd\"\n            ]\n        }\n        self.yaml: YAML = YAML()\n        print(\"Application settings initialized.\")\n\n    def init_settings(self) -&gt; bool:\n        \"\"\"\n        This method writes a configuration template for how to read the project / sourcecode, if it not already exists.\n\n        Returns:\n            Result of the operation, True if creating configuration file successfully\n        \"\"\"\n        print(\"Initializing documentation settings ...\")\n        if isfile(self.doc_conf_file):\n            print(f\"Configuration file {self.doc_conf_file} already exists.\")\n            print(\"If you want start over again, you have to delete (after backup?) the file first\")\n            return False\n        try:\n            with open(self.doc_conf_file, \"w\") as file:\n                self.yaml.dump(self.doc_conf_data, file)\n                print(f\"Documentation settings template {self.doc_conf_file} successfully created.\")\n                return True\n        except Exception as e:\n            print(f\"Writing file {self.doc_conf_file} failed with Exception:\")\n            print(e)\n            return False\n\n    def load_settings(self) -&gt; bool:\n        \"\"\"\n        Loads the settings from the configuration file, if it exists, and serializes it into the doc_conf_data dict.\n\n        Returns:\n            True if loading and serializing is successful. Further checks of the correctness of the file are not done\n                here, has to be done before reading the source at the build stage\n        \"\"\"\n        print(\"Loading documentation settings ...\")\n        if not isfile(self.doc_conf_file):\n            print(f\"Configuration file {self.doc_conf_file} doesn't exist.\")\n            print(\"A settings template can be created with:\")\n            print(\"    md_gd4_docs --init\")\n            return False\n        try:\n            with open(self.doc_conf_file, \"r\") as file:\n                self.doc_conf_data = self.yaml.load(file)\n                if not self.doc_conf_data[\"doc_destination\"].endswith(\"/\"):\n                    self.doc_conf_data[\"doc_destination\"] = \\\n                        self.doc_conf_data[\"doc_destination\"] + \"/\"\n                if not self.doc_conf_data[\"project_scan_options\"][\"src_path\"].endswith(\"/\"):\n                    self.doc_conf_data[\"project_scan_options\"][\"src_path\"] = \\\n                        self.doc_conf_data[\"project_scan_options\"][\"src_path\"] + \"/\"\n                print(f\"Documentation settings file {self.doc_conf_file} successfully loaded.\")\n                return True\n        except Exception as e:\n            print(f\"Reading file {self.doc_conf_file} failed with Exception:\")\n            print(e)\n            return False\n\n    def get_settings(self) -&gt; CommentedMap:\n        \"\"\"\n        Get the settings dict.\n\n        Returns:\n            doc_conf_data: Deserialized settings object. Further checks of the correctness of this settings object is\n                not done here, has to be done before reading the source at the build stage\n        \"\"\"\n        return CommentedMap(self.doc_conf_data)\n</code></pre>"},{"location":"src/control/settings/#src.control.settings.Settings.__init__","title":"<code>__init__()</code>","text":"<p>Constructor of the class, defining class attributes.</p> Source code in <code>src/control/settings.py</code> <pre><code>def __init__(self):\n    \"\"\"\n    Constructor of the class, defining class attributes.\n    \"\"\"\n    self.doc_conf_file: str = \"./md_gd4_docs.yml\"\n    self.doc_conf_data: [dict | CommentedMap] = {\n        \"doc_destination\": \"\",\n        \"rebuild_src_path\": True,\n        \"project_scan\": True,\n        \"project_scan_options\": {\n            \"src_path\": \"\",\n            \"read_gd_project\": True,\n            \"scene2src_links\": True\n        },\n        \"filelist_scan\": False,\n        \"scan_list\": [\n            \"./file1.gd\",\n            \"./file2.gd\"\n        ]\n    }\n    self.yaml: YAML = YAML()\n    print(\"Application settings initialized.\")\n</code></pre>"},{"location":"src/control/settings/#src.control.settings.Settings.get_settings","title":"<code>get_settings()</code>","text":"<p>Get the settings dict.</p> <p>Returns:</p> Name Type Description <code>doc_conf_data</code> <code>CommentedMap</code> <p>Deserialized settings object. Further checks of the correctness of this settings object is not done here, has to be done before reading the source at the build stage</p> Source code in <code>src/control/settings.py</code> <pre><code>def get_settings(self) -&gt; CommentedMap:\n    \"\"\"\n    Get the settings dict.\n\n    Returns:\n        doc_conf_data: Deserialized settings object. Further checks of the correctness of this settings object is\n            not done here, has to be done before reading the source at the build stage\n    \"\"\"\n    return CommentedMap(self.doc_conf_data)\n</code></pre>"},{"location":"src/control/settings/#src.control.settings.Settings.init_settings","title":"<code>init_settings()</code>","text":"<p>This method writes a configuration template for how to read the project / sourcecode, if it not already exists.</p> <p>Returns:</p> Type Description <code>bool</code> <p>Result of the operation, True if creating configuration file successfully</p> Source code in <code>src/control/settings.py</code> <pre><code>def init_settings(self) -&gt; bool:\n    \"\"\"\n    This method writes a configuration template for how to read the project / sourcecode, if it not already exists.\n\n    Returns:\n        Result of the operation, True if creating configuration file successfully\n    \"\"\"\n    print(\"Initializing documentation settings ...\")\n    if isfile(self.doc_conf_file):\n        print(f\"Configuration file {self.doc_conf_file} already exists.\")\n        print(\"If you want start over again, you have to delete (after backup?) the file first\")\n        return False\n    try:\n        with open(self.doc_conf_file, \"w\") as file:\n            self.yaml.dump(self.doc_conf_data, file)\n            print(f\"Documentation settings template {self.doc_conf_file} successfully created.\")\n            return True\n    except Exception as e:\n        print(f\"Writing file {self.doc_conf_file} failed with Exception:\")\n        print(e)\n        return False\n</code></pre>"},{"location":"src/control/settings/#src.control.settings.Settings.load_settings","title":"<code>load_settings()</code>","text":"<p>Loads the settings from the configuration file, if it exists, and serializes it into the doc_conf_data dict.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if loading and serializing is successful. Further checks of the correctness of the file are not done here, has to be done before reading the source at the build stage</p> Source code in <code>src/control/settings.py</code> <pre><code>def load_settings(self) -&gt; bool:\n    \"\"\"\n    Loads the settings from the configuration file, if it exists, and serializes it into the doc_conf_data dict.\n\n    Returns:\n        True if loading and serializing is successful. Further checks of the correctness of the file are not done\n            here, has to be done before reading the source at the build stage\n    \"\"\"\n    print(\"Loading documentation settings ...\")\n    if not isfile(self.doc_conf_file):\n        print(f\"Configuration file {self.doc_conf_file} doesn't exist.\")\n        print(\"A settings template can be created with:\")\n        print(\"    md_gd4_docs --init\")\n        return False\n    try:\n        with open(self.doc_conf_file, \"r\") as file:\n            self.doc_conf_data = self.yaml.load(file)\n            if not self.doc_conf_data[\"doc_destination\"].endswith(\"/\"):\n                self.doc_conf_data[\"doc_destination\"] = \\\n                    self.doc_conf_data[\"doc_destination\"] + \"/\"\n            if not self.doc_conf_data[\"project_scan_options\"][\"src_path\"].endswith(\"/\"):\n                self.doc_conf_data[\"project_scan_options\"][\"src_path\"] = \\\n                    self.doc_conf_data[\"project_scan_options\"][\"src_path\"] + \"/\"\n            print(f\"Documentation settings file {self.doc_conf_file} successfully loaded.\")\n            return True\n    except Exception as e:\n        print(f\"Reading file {self.doc_conf_file} failed with Exception:\")\n        print(e)\n        return False\n</code></pre>"},{"location":"userdoc/","title":"User manual","text":""}]}